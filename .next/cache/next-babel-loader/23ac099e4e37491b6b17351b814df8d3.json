{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sushant/Dev/next-my-app/pages/user/[id].tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport { SimpleGrid, Text, Alert } from '@chakra-ui/core';\n\nvar fetcher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            res = _context.sent;\n\n            if (res.ok) {\n              _context.next = 5;\n              break;\n            }\n\n            throw Error('Something crappy happened!!');\n\n          case 5:\n            _context.next = 7;\n            return res.json();\n\n          case 7:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetcher(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar User = function User() {\n  _s();\n\n  var router = useRouter();\n\n  var _router$query = router.query,\n      id = _router$query.id,\n      rest = _objectWithoutProperties(_router$query, [\"id\"]);\n\n  var _useSWR = useSWR('api/user/${id}', fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) {\n    return __jsx(Alert, {\n      status: \"error\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 12\n      }\n    }, \"Loading failed: \", error.message);\n  }\n\n  if (!data) {\n    return __jsx(Alert, {\n      status: \"info\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 12\n      }\n    }, \"Loading ...\");\n  }\n\n  return __jsx(SimpleGrid, {\n    columns: 2,\n    width: \"2xs\",\n    spacingY: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(Text, {\n    fontWeight: \"bold\",\n    marginRight: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"UserID\"), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, data.id), __jsx(Text, {\n    fontWeight: \"bold\",\n    marginRight: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, \"Name\"), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, data.name), __jsx(Text, {\n    fontWeight: \"bold\",\n    marginRight: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Email\"), __jsx(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, data.email));\n};\n\n_s(User, \"F2OQGCTB9lgwThKfzWI7sczFgbA=\", false, function () {\n  return [useRouter, useSWR];\n});\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/sushant/Dev/next-my-app/pages/user/[id].tsx"],"names":["useRouter","useSWR","SimpleGrid","Text","Alert","fetcher","url","fetch","res","ok","Error","json","data","User","router","query","id","rest","error","message","name","email"],"mappings":";;;;;;;;;;AAAA,SAAQA,SAAR,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,KAA3B,QAAwC,iBAAxC;;AAEA,IAAMC,OAAO;AAAA,sEAAG,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACIC,KAAK,CAACD,GAAD,CADT;;AAAA;AACRE,YAAAA,GADQ;;AAAA,gBAEVA,GAAG,CAACC,EAFM;AAAA;AAAA;AAAA;;AAAA,kBAGNC,KAAK,CAAC,6BAAD,CAHC;;AAAA;AAAA;AAAA,mBAKkDF,GAAG,CAACG,IAAJ,EALlD;;AAAA;AAKRC,YAAAA,IALQ;AAAA,6CAMPA,IANO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPP,OAAO;AAAA;AAAA;AAAA,GAAb;;AASA,IAAMQ,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,MAAMC,MAAM,GAAGd,SAAS,EAAxB;;AADiB,sBAEOc,MAAM,CAACC,KAFd;AAAA,MAETC,EAFS,iBAETA,EAFS;AAAA,MAEFC,IAFE;;AAAA,gBAGOhB,MAAM,CAAC,gBAAD,EAAmBI,OAAnB,CAHb;AAAA,MAGTO,IAHS,WAGTA,IAHS;AAAA,MAGHM,KAHG,WAGHA,KAHG;;AAKjB,MAAGA,KAAH,EAAU;AACR,WAAO,MAAC,KAAD;AAAO,MAAA,MAAM,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwCA,KAAK,CAACC,OAA9C,CAAP;AACD;;AAED,MAAG,CAACP,IAAJ,EAAU;AACR,WAAO,MAAC,KAAD;AAAO,MAAA,MAAM,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD;;AAED,SACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAE,CAArB;AAAwB,IAAA,KAAK,EAAC,KAA9B;AAAoC,IAAA,QAAQ,EAAE,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,WAAW,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAI,CAACI,EAAZ,CAFF,EAIE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,WAAW,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,EAKE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOJ,IAAI,CAACQ,IAAZ,CALF,EAOE,MAAC,IAAD;AAAM,IAAA,UAAU,EAAC,MAAjB;AAAwB,IAAA,WAAW,EAAE,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAPF,EAQE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOR,IAAI,CAACS,KAAZ,CARF,CADF;AAYD,CAzBD;;GAAMR,I;UACWb,S,EAESC,M;;;KAHpBY,I;AA2BN,eAAeA,IAAf","sourcesContent":["import {useRouter} from 'next/router';\nimport useSWR from 'swr';\nimport { SimpleGrid, Text, Alert } from '@chakra-ui/core';\n\nconst fetcher = async (url: string) => {\n  const res = await fetch(url);\n  if(!res.ok) {\n    throw Error('Something crappy happened!!');\n  }\n  const data: { id: string; name: string; email: string } = await res.json();\n  return data;\n}\n\nconst User = () => {\n  const router = useRouter();\n  const { id, ...rest } = router.query;\n  const { data, error } = useSWR('api/user/${id}', fetcher);  \n\n  if(error) {\n    return <Alert status=\"error\">Loading failed: { error.message }</Alert>\n  }\n\n  if(!data) {\n    return <Alert status=\"info\">Loading ...</Alert>\n  }\n\n  return (\n    <SimpleGrid columns={2} width=\"2xs\" spacingY={4}>\n      <Text fontWeight=\"bold\" marginRight={4}>UserID</Text>\n      <Text>{data.id}</Text>\n\n      <Text fontWeight=\"bold\" marginRight={4}>Name</Text>\n      <Text>{data.name}</Text>\n\n      <Text fontWeight=\"bold\" marginRight={4}>Email</Text>\n      <Text>{data.email}</Text>\n    </SimpleGrid>\n  );\n}\n\nexport default User;"]},"metadata":{},"sourceType":"module"}